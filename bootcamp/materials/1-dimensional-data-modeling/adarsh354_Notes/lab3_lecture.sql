--Objective: Aanalysing Basketball data as a graph data model


--so a graph has 2 entities vertices and the edges that connect them
--creating a vertex type to kind of tag the vertex object AS A PLAYER, TEAM OR GAME
CREATE TYPE VERTEX_TYPE 
    AS ENUM('PLAYER', 'TEAM', 'GAME');

--creating the vertex table to store vertices
CREATE TABLE VERTEX(
    IDENTIFIER TEXT,
    TYPE VERTEX_TYPE,
    PROPERTIES JSON,
    PRIMARY KEY(IDENTIFIER, TYPE)
);

--CREATING A EDGE TYPE TO TAG EDGE OBJECTS AS PLAYED_AGAINST OR  SHARES_TEAM, PLAYS_IN(A TEAM) OR PLAYS_ON(FOR A MATCH)
CREATE TYPE EDGE_TYPE
    AS ENUM('PLAYS_AGAINST','SHARES_TEAM', 'PLAYS_IN', 'PLAYS_ON');

--CREATING THE EDGE TABLE TO STORE RELATION BETWEEN A SUBJECT AND OBJECT AS AN EDGE
CREATE TABLE EDGE(
    SUBJECT_IDENTIFIER TEXT,
    SUBJECT_TYPE VERTEX_TYPE,
    OBJECT_IDENTIFIER TEXT,
    OBJECT_TYPE VERTEX_TYPE,
    EDGE_TYPE EDGE_TYPE,
    PROPERTIES JSON,
    PRIMARY KEY(SUBJECT_IDENTIFIER, SUBJECT_TYPE, OBJECT_IDENTIFIER, OBJECT_TYPE, EDGE_TYPE)
);



--FILLING THE VERTIEX TABLE

--FILLING WITH GAMES
INSERT INTO VERTEX
SELECT 
    GAME_ID AS IDENTIFIER,
    'GAME'::VERTEX_TYPE AS TYPE,
    json_build_object(
        'PTS_HOME', PTS_HOME,
        'PTS_AWAY', PTS_AWAY,
        'WINNING_TEAM', CASE WHEN HOME_TEAM_WINS = 1 THEN home_team_id ELSE visitor_team_id END
    ) AS PROPERTIES
     FROM GAMES;

--FILLING WITH PLAYER
WITH PLAYER_AGG AS (
SELECT 
    PLAYER_ID AS IDENTIFIER,
    MAX(PLAYER_NAME) AS PLAYER_NAME,
    COUNT(1) AS NUMBER_OF_GAMES,
    SUM(PTS) AS TOTAL_POINTS,
    ARRAY_AGG(DISTINCT TEAM_ID) AS TEAMS
 FROM GAME_DETAILS
 GROUP BY PLAYER_ID
 )
 INSERT INTO VERTEX
 SELECT
    IDENTIFIER,
    'PLAYER'::VERTEX_TYPE,
    JSON_BUILD_OBJECT(
        'PLAYER_NAME', PLAYER_NAME,
        'NUMBER_OF_GAMES', NUMBER_OF_GAMES,
        'TOTAL_POINTS', TOTAL_POINTS,
        'TEAMS', TEAMS
    ) AS PROPERTIES
FROM PLAYER_AGG
 ;

--FILLING WITH TEAM
INSERT INTO VERTEX
WITH TEAM_AGG AS(
 SELECT 
 *,
 ROW_NUMBER() OVER (PARTITION BY TEAM_ID) AS ROW_NUM 
 FROM teams
)
SELECT 
    TEAM_ID AS IDENTIFIER,
    'TEAM'::VERTEX_TYPE AS TYPE,
    JSON_BUILD_OBJECT(
        'ABBREVIATION', ABBREVIATION,
        'NICKNAME', NICKNAME,
        'CITY', CITY,
        'ARENA', ARENA,
        'YEAR_FOUNDED', YEARFOUNDED
    )
FROM TEAM_AGG
WHERE ROW_NUM=1;



--VERTEX TYPE AGG
SELECT TYPE, COUNT(1)
FROM VERTEX
GROUP BY 1


--FILLINg EDGES OBJECT
--'PLAYS_AGAINST','SHARES_TEAM', 'PLAYS_IN', 'PLAYS_ON'
--SUBJECT_IDENTIFIER TEXT,
--SUBJECT_TYPE VERTEX_TYPE,
--OBJECT_IDENTIFIER TEXT,
--OBJECT_TYPE VERTEX_TYPE,
--EDGE_TYPE EDGE_TYPE,
--PROPERTIES JSON,


--'plays_in' enum type filling
WITH DEDUPED AS(
    SELECT 
    *,
    ROW_NUMBER() OVER (PARTITION BY PLAYER_ID, GAME_ID) AS ROW_NUM
    FROM game_details
    )
INSERT INTO edge
SELECT 
      PLAYER_ID AS SUBJECT_IDENTIFIER,
      'PLAYER'::VERTEX_TYPE AS SUBJECT_TYPE,
      GAME_ID AS OBJECT_IDENTIFIER,
      'GAME'::VERTEX_TYPE AS OBJECT_TYPE,
      'PLAYS_IN'::EDGE_TYPE AS EDGE_TYPE,
      JSON_BUILD_OBJECT(
        'START_POSITION', start_position,
        'PTS', PTS,
        'TEAM_ID', TEAM_ID,
        'TEAM_ABBREVIATION', team_abbreviation
      )
FROM DEDUPED 
WHERE ROW_NUM=1


--'PLAYS_AGAINST','SHARES_TEAM'
with deduped as(
    SELECT *, ROW_NUMBER() OVER(PARTITION BY PLAYER_ID, GAME_ID) AS ROW_NUM
     FROM game_details
),
FILTERED AS (
    SELECT * FROM DEDUPED WHERE ROW_NUM=1
),
AGGREGATED AS (
SELECT 
    F1.PLAYER_ID AS SUBJECT_PLAYER_ID,
    MAX(F1.PLAYER_NAME) AS SUBJECT_PLAYER_NAME,
    F2.PLAYER_ID AS OBJECT_PLAYER_ID,
    MAX(F2.PLAYER_NAME) AS OBJECT_PLAYER_NAME,
    CASE WHEN F1.team_abbreviation = F2.team_abbreviation
        THEN 'SHARES_TEAM'::EDGE_TYPE
    ELSE 
         'PLAYS_AGAINST'::EDGE_TYPE
    END AS EDGE_TYPE,
    COUNT(F1.GAME_ID) AS NUM_OF_GAMES,
    SUM(F1.PTS) AS SUBJECT_POINTS,
    SUM(F2.PTS) AS OBJECT_POINTS
FROM 
FILTERED F1 JOIN FILTERED F2
ON F1.GAME_ID = F2.game_id
AND F1.PLAYER_ID <> F2.player_id
GROUP BY F1.PLAYER_ID,
F2.PLAYER_ID,
CASE WHEN F1.team_abbreviation = F2.team_abbreviation
        THEN 'SHARES_TEAM'::EDGE_TYPE
    ELSE 
         'PLAYS_AGAINST'::EDGE_TYPE
    END
)
INSERT INTO EDGE
SELECT 
    SUBJECT_PLAYER_ID AS SUBJECT_IDENTIFIER,
    'PLAYER'::VERTEX_TYPE AS SUBJECT_TYPE,
    OBJECT_PLAYER_ID AS OBJECT_IDENTIFIER,
    'PLAYER'::VERTEX_TYPE AS OBJECT_TYPE,
    EDGE_TYPE,
    JSON_BUILD_OBJECT(
        'NUM_OF_GAMES',NUM_OF_GAMES,
        'SUBJECT_POINTS',SUBJECT_POINTS,
        'OBJECT_POINTS',OBJECT_POINTS
    )
 FROM AGGREGATED
 


--TRY IT QUERY
SELECT 
    V.PROPERTIES->>'PLAYER_NAME',
    CAST(V.PROPERTIES->>'TOTAL_POINTS' AS REAL)/
    CASE WHEN CAST(V.PROPERTIES->>'NUMBER_OF_GAMES' AS REAL) = 0 THEN 1 ELSE CAST(V.PROPERTIES->>'NUMBER_OF_GAMES' AS REAL)
    END AS POINTS_PER_GAME
FROM VERTEX V JOIN EDGE E
ON E.SUBJECT_IDENTIFIER = V.identifier
AND E.SUBJECT_TYPE = V.TYPE
WHERE E.OBJECT_TYPE = 'PLAYER'::VERTEX_TYPE


